# type: ignore
from architecture_otus_2.auto_generated_adapters.autogenerated import AdapterGenerator
from architecture_otus_2.vector import Vector
from typing import Any, Protocol
import inspect
from ioc import Ioc


class Movable(Protocol):
    obj: Any

    def get_location(self) -> Vector:
        ...

    def get_velocity(self) -> Vector:
        ...

    def set_velocity(self, value: Vector) -> Vector:
        ...

    def finish(self) -> str:
        ...


def test_methods() -> None:
    adapter_class = AdapterGenerator(Movable, object()).generate_adapter_class()

    assert adapter_class.__name__ == "AutoGeneratedMovableAdapter"

    assert inspect.isfunction(adapter_class.get_location)
    assert list(inspect.signature(adapter_class.get_location).parameters) == ["self"]

    assert inspect.isfunction(adapter_class.get_velocity)
    assert list(inspect.signature(adapter_class.get_velocity).parameters) == ["self"]

    assert inspect.isfunction(adapter_class.set_velocity)
    assert list(inspect.signature(adapter_class.set_velocity).parameters) == [
        "self",
        "value",
    ]
    assert inspect.isfunction(adapter_class.finish)
    assert list(inspect.signature(adapter_class.finish).parameters) == ["self"]

    assert inspect.isfunction(adapter_class.__init__)
    assert list(inspect.signature(adapter_class.__init__).parameters) == ["self", "obj"]


def test_instance() -> None:
    some_object = {
        "location": Vector(1, 1),
        "velocity": Vector(5, 5),
    }

    def set_velocity(obj: dict[str, Vector], value: Vector) -> Vector:
        obj["velocity"] = value
        return value

    def finish(obj) -> str:
        return "finish"

    with Ioc.resolve("ioc.scope.new"):
        Ioc.resolve(
            "ioc.register", "Movable:location.get", lambda *args: args[0]["location"]
        ).execute()
        Ioc.resolve(
            "ioc.register", "Movable:velocity.get", lambda *args: args[0]["velocity"]
        ).execute()
        Ioc.resolve(
            "ioc.register",
            "Movable:velocity.set",
            lambda *args: set_velocity(args[0], args[1]),
        ).execute()
        Ioc.resolve(
            "ioc.register",
            "Movable:finish",
            lambda *args: finish(args[0]),
        ).execute()

        adapter_instance: Movable = AdapterGenerator(
            Movable, some_object
        ).create_adapter_instance()

        assert adapter_instance.obj == some_object
        assert adapter_instance.get_location() == Vector(1, 1)
        assert adapter_instance.get_velocity() == Vector(5, 5)
        assert adapter_instance.set_velocity(Vector(10, 10)) == Vector(10, 10)
        assert adapter_instance.get_velocity() == Vector(10, 10)

        assert adapter_instance.finish() == "finish"
